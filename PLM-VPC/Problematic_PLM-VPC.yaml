# aws cloudformation create-stack --template-body file://PLM-VPC/Problematic_PLM-VPC.yaml --region us-west-2 --tags Key=Cost,Value=PLM Key=MinorCost,Value=PLM-VPC --stack-name PLM-VPC
# aws cloudformation update-stack --template-body file://PLM-VPC/Problematic_PLM-VPC.yaml --region us-west-2 --tags Key=Cost,Value=PLM Key=MinorCost,Value=PLM-VPC --stack-name PLM-VPC

# while true ; do aws cloudformation describe-stacks --region us-west-2 --stack-name PLM-VPC --query Stacks[].StackStatus && sleep 5; done


# aws cloudformation delete-stack --region us-west-2 --stack-name PLM-VPC



AWSTemplateFormatVersion: '2010-09-09'
Description: APLM Lab
Parameters:
  EnvironmentName:
    Type: String
    Default: PLM
    Description: "A friendly environment name that will be used for namespacing all cluster resources. Example: staging, qa, or production"
Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are four subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.0.255
  # 10.0.1.0 - 10.0.1.255
  # 10.0.2.0 - 10.0.2.255
  # 10.0.3.0 - 10.0.3.255
  #
  # If you need more IP addresses (perhaps you have so many
  # instances that you run out) then you can customize these
  # ranges to add more
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/20'
    PublicTwo:
      CIDR: '10.0.16.0/20'
    PrivateOne:
      CIDR: '10.0.32.0/20'
    PrivateTwo:
      CIDR: '10.0.64.0/20'
Resources:
  # VPC in which containers will be networked.
  # It has two public subnets, and two private subnets.
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnetOne
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnetTwo

  # Two private subnets where containers will only have private
  # IP addresses, and will only be reachable by other members of the
  # VPC
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnetOne
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnetTwo

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Setup networking resources for the private subnets. Containers
  # in these subnets have only private IP addresses, and must use a NAT
  # gateway to talk to the internet. We launch two NAT gateways, one for
  # each private subnet.

  #### Prob 4.4.1 ####
  # NatGatewayOneAttachmentBAD:
  #   Type: AWS::EC2::EIP
  #   DependsOn: GatewayAttachement
  #   Properties:
  #     Domain: vpc
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName}-NatGatewayOneAttachmentBAD
  ################
  #### Fix 4.4.1 ####
  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NatGatewayOneAttachment
  # ################
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NatGatewayTwoAttachment
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      # AllocationId: !GetAtt NatGatewayOneAttachmentBAD.AllocationId       # Prob 4.4.1
      # SubnetId: !Ref PrivateSubnetOne                                     # Prob 4.4.1
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId            # Fix 4.4.1
      SubnetId: !Ref PublicSubnetOne                                        # Fix 4.4.1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NatGatewayOne
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NatGatewayTwo
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTableOne
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTableTwo
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
      # NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo


  AllInterfaceEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Inbound+Outbond access to the Non SSM InterfaceEndpoint
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-AllInterfaceEndpointSecurityGroup
  AllInterfaceEndpointSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AllInterfaceEndpointSecurityGroup
      CidrIp: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      IpProtocol: tcp
      FromPort: 443     # Fix 1.4.1
      ToPort: 443       # Fix 1.4.1
      # FromPort: 80    # Prob 1.4.1
      # ToPort: 80      # Prob 1.4.1
      Description: Allow Inbound access to the Non SSM InterfaceEndpoint

  DefaultInterfaceEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DefaultInterfaceEndpointSecurityGroup
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DefaultInterfaceEndpointSecurityGroup
  DefaultInterfaceEndpointSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DefaultInterfaceEndpointSecurityGroup
      SourceSecurityGroupId: !Ref DefaultInterfaceEndpointSecurityGroup
      IpProtocol: -1
      Description: DefaultInterfaceEndpointSecurityGroup

  EcrDkrInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.dkr'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:GetAuthorizationToken' # Fix 7.4.1  # Prob 7.4.1
            Resource: '*'
            Effect: Allow
            Principal: '*'
      VpcId: !Ref VPC
      SubnetIds: 
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
      SecurityGroupIds:
        - !Ref AllInterfaceEndpointSecurityGroup
        - !Ref DefaultInterfaceEndpointSecurityGroup

  EcrApiInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecr.api'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:GetAuthorizationToken' # Fix 7.4.1  # Prob 7.4.1
            Resource: '*'
            Effect: Allow
            Principal: '*'
      VpcId: !Ref VPC
      SubnetIds: 
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
      SecurityGroupIds:
        - !Ref AllInterfaceEndpointSecurityGroup          # Fix 6.4.1
        - !Ref DefaultInterfaceEndpointSecurityGroup      # Prob 6.4.1

  EcsAgentInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecs-agent'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: "*"
            Resource: '*'
            Effect: Allow
            Principal: '*'
      VpcId: !Ref VPC
      SubnetIds: 
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
      SecurityGroupIds:
        - !Ref AllInterfaceEndpointSecurityGroup    # Prob 2.4.1    # Fix 2.4.1
        - !Ref DefaultInterfaceEndpointSecurityGroup

  EcsTelemetryInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecs-telemetry'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: "*"
            Resource: '*'
            Effect: Allow
            Principal: '*'
      VpcId: !Ref VPC
      SubnetIds: 
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
      SecurityGroupIds:
        - !Ref AllInterfaceEndpointSecurityGroup
        - !Ref DefaultInterfaceEndpointSecurityGroup

  EcsInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ecs'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: "*"
            Resource: '*'
            Effect: Allow
            Principal: '*'
      VpcId: !Ref VPC
      SubnetIds: 
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
      SecurityGroupIds:
        - !Ref AllInterfaceEndpointSecurityGroup
        - !Ref DefaultInterfaceEndpointSecurityGroup






# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Sub ${EnvironmentName}:VpcId
  VpcCIDR:
    Description: The ID of the VPC that this stack is deployed in
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub ${EnvironmentName}:VpcCIDR
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Sub ${EnvironmentName}:PublicSubnetOne
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Sub ${EnvironmentName}:PublicSubnetTwo
  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref 'PrivateSubnetOne'
    Export:
      Name: !Sub ${EnvironmentName}:PrivateSubnetOne
  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref 'PrivateSubnetTwo'
    Export:
      Name: !Sub ${EnvironmentName}:PrivateSubnetTwo
